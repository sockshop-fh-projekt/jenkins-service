@Library('dynatrace@master') _

def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [context: 'ENVIRONMENT', key: 'application', value: ''],
      [context: 'CONTEXTLESS', key: 'service', value: ''],
      [context: 'CONTEXTLESS', key: 'environment', value: '']
    ]
  ]
]

def GATEWAY = ''

pipeline {
  parameters {
    string(name: 'GITHUBORG', defaultValue: 'sockshop-fh-projekt', description: 'The name of the GitHub organization.', trim: true)
    string(name: 'PROJECT', defaultValue: 'sockshop', description: 'The name of the entire project.', trim: true)
    string(name: 'TESTSTRATEGY', defaultValue: 'performance', description: 'The test strategy for this stage.', trim: true)
    string(name: 'DEPLOYMENTSTRATEGY', defaultValue: 'blue_green_mirroring', description: 'The deployment strategy for this stage.', trim: true)
    string(name: 'STAGE', defaultValue: 'staging', description: 'The stage to deploy the service to.', trim: true)
    string(name: 'SERVICE', defaultValue: 'carts', description: 'The name of the service to deploy.', trim: true)
    string(name: 'IMAGE', defaultValue: '10.31.253.242:5000/sockshop/carts', description: 'The image of the new service.', trim: true)
    string(name: 'TAG', defaultValue: '0.6.0-17', description: 'The tag of the new service.', trim: true)
    string(name: 'KEPTNCONTEXT', defaultValue: '9812323nhafh', description: 'An id used for keptn tracing', trim: true)
    string(name: 'EVALUATIONPASSED', defaultValue: 'true', description: 'Indicates wether the evaluation has been successful', trim: true)
  }
  agent {
    label 'kubegit'
  }
  stages {
    stage('Activate mirrored version'){   
      when {
        expression {
          return env.EVALUATIONPASSED ==~ 'true'
        }
      }
      steps {   
        script {
          if ( env.DEPLOYMENTSTRATEGY ==~ 'blue_green_mirroring' ) {
            container("git") {
              withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                sh "rm -rf ${env.PROJECT}"
                sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
                sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUBORG}/${env.PROJECT}"
                sh "cd ${env.PROJECT} && git checkout ${env.STAGE}"

                sh "cd ${env.PROJECT} && sed -i \"/mirror:/{p;s/.*/                    destination:/;}\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"  
                sh "cd ${env.PROJECT} && sed -i \"s/mirror:/    -/\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"

                sh "cd ${env.PROJECT} && sed -i \"s#subset: blue#subset: swap_green#\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"
                sh "cd ${env.PROJECT} && sed -i \"s#subset: green#subset: blue#\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"
                sh "cd ${env.PROJECT} && sed -i \"s#subset: swap_green#subset: green#\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"

                sh "cd ${env.PROJECT} && sed -i \"s/host:\\(.*\\)#m/        host:\\1#m/\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"
                sh "cd ${env.PROJECT} && sed -i \"s/subset:\\(.*\\)#m/        subset:\\1#m/\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"
                sh "cd ${env.PROJECT} && sed -i \"s/#marker/weight: 0/\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"

                sh "cd ${env.PROJECT} && git add ."
                sh "cd ${env.PROJECT} && git commit -am '[keptn]: Removed mirroring and activated new version'"
                sh "cd ${env.PROJECT} && git push"
              }
            }         
            container("curl") {
              sendCloudEvent(
                receiver: 'event-broker.keptn.svc.cluster.local/keptn',
                type: 'sh.keptn.events.configuration-changed',
                source: 'Jenkins',
                shkeptncontext : "${env.KEPTNCONTEXT}",
                data: [
                  [key: 'githuborg', value: "${env.GITHUBORG}"],
                  [key: 'project', value: "${env.PROJECT}"],
                  [key: 'teststrategy', value: ""],
                  [key: 'deploymentstrategy', value: "${env.DEPLOYMENTSTRATEGY}"],
                  [key: 'stage', value: "${env.STAGE}"],
                  [key: 'service', value: "${env.SERVICE}"],
                  [key: 'image', value: "${env.IMAGE}"],
                  [key: 'tag', value: "${env.TAG}"]
                ]
              )
            }
          }
        }
      }
    }
    stage('Promote artifact to next stage') {
      when {
        expression {
          return env.EVALUATIONPASSED ==~ 'true'
        }
      }
      steps {
        script {
          container("curl") {
            sendCloudEvent(
              receiver: 'event-broker.keptn.svc.cluster.local/keptn',
              type: 'sh.keptn.events.new-artefact',
              source: 'Jenkins',
              shkeptncontext : "${env.KEPTNCONTEXT}",
              data: [
                [key: 'githuborg', value: "${env.GITHUBORG}"],
                [key: 'project', value: "${env.PROJECT}"],
                [key: 'teststrategy', value: "${env.TESTSTRATEGY}"],
                [key: 'deploymentstrategy', value: "${env.DEPLOYMENTSTRATEGY}"],
                [key: 'stage', value: "${env.STAGE}"],
                [key: 'service', value: "${env.SERVICE}"],
                [key: 'image', value: "${env.IMAGE}"],
                [key: 'tag', value: "${env.TAG}"]
              ]
            )
          }
        }
      }
    }
    stage('Roll back') {
      when {
        expression {
          return env.EVALUATIONPASSED ==~ 'false'
        }
      }
      steps {
        script {
          if ( env.DEPLOYMENTSTRATEGY ==~ 'blue_green_service'  || env.DEPLOYMENTSTRATEGY ==~ 'blue_green_mirroring' ) {
              if ( env.DEPLOYMENTSTRATEGY ==~ 'blue_green_service' ) {
                container("git"){
                  withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh "rm -rf ${env.PROJECT}"
                    sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
                    sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUBORG}/${env.PROJECT}"
                    sh "cd ${env.PROJECT} && git checkout ${env.STAGE}"

                    sh "cd ${env.PROJECT} && sed -i \"s#weight: 0#weight: swap_100#\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"
                    sh "cd ${env.PROJECT} && sed -i \"s#weight: 100#weight: 0#\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"
                    sh "cd ${env.PROJECT} && sed -i \"s#weight: swap_100#weight: 100#\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"

                    sh "cd ${env.PROJECT} && git add ."
                    sh "cd ${env.PROJECT} && git commit -am '[keptn]: Switched blue green due to failed evaluation.'"
                    sh "cd ${env.PROJECT} && git push"
                  }
                }
              }
              if ( env.DEPLOYMENTSTRATEGY ==~ 'blue_green_mirroring' ) {
                 container("git"){
                  withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh "rm -rf ${env.PROJECT}"
                    sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
                    sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUBORG}/${env.PROJECT}"
                    sh "cd ${env.PROJECT} && git checkout ${env.STAGE}"

                    sh "cd ${env.PROJECT} && sed -i \"/mirror:/{p;s/.*/                    destination:/;}\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"  
                    sh "cd ${env.PROJECT} && sed -i \"s/mirror:/    -/\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"

                    sh "cd ${env.PROJECT} && sed -i \"s/host:\\(.*\\)#m/        host:\\1#m/\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"
                    sh "cd ${env.PROJECT} && sed -i \"s/subset:\\(.*\\)#m/        subset:\\1#m/\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"
                    sh "cd ${env.PROJECT} && sed -i \"s/#marker/weight: 0/\" helm-chart/templates/istio-virtual-service-${env.SERVICE}.yaml"

                    sh "cd ${env.PROJECT} && git add ."
                    sh "cd ${env.PROJECT} && git commit -am '[keptn]: Removed mirroring due to failed evaluation.'"
                    sh "cd ${env.PROJECT} && git push"
                  }
                }
              }
              container("curl") {
                sendCloudEvent(
                  receiver: 'event-broker.keptn.svc.cluster.local/keptn',
                  type: 'sh.keptn.events.configuration-changed',
                  source: 'Jenkins',
                  shkeptncontext : "${env.KEPTNCONTEXT}",
                  data: [
                    [key: 'githuborg', value: "${env.GITHUBORG}"],
                    [key: 'project', value: "${env.PROJECT}"],
                    [key: 'teststrategy', value: ""],
                    [key: 'deploymentstrategy', value: "${env.DEPLOYMENTSTRATEGY}"],
                    [key: 'stage', value: "${env.STAGE}"],
                    [key: 'service', value: "${env.SERVICE}"],
                    [key: 'image', value: "${env.IMAGE}"],
                    [key: 'tag', value: "${env.TAG}"]
                  ]
                )
              }
            }
          }
        }
      }
    }
  }
}
