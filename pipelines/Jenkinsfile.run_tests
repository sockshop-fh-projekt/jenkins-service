@Library('dynatrace@master') _

def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [context: 'ENVIRONMENT', key: 'application', value: ''],
      [context: 'CONTEXTLESS', key: 'service', value: ''],
      [context: 'CONTEXTLESS', key: 'environment', value: '']
    ]
  ]
]

def GATEWAY = ''

pipeline {
  parameters {
    string(name: 'GITHUBORG', defaultValue: '', description: 'The name of the GitHub organization.', trim: true)
    string(name: 'PROJECT', defaultValue: '', description: 'The name of the entire project.', trim: true)
    string(name: 'TESTSTRATEGY', defaultValue: '', description: 'The test strategy for this stage.', trim: true)
    string(name: 'DEPLOYMENTSTRATEGY', defaultValue: '', description: 'The deployment strategy for this stage.', trim: true)
    string(name: 'STAGE', defaultValue: '', description: 'The stage to deploy the service to.', trim: true)
    string(name: 'SERVICE', defaultValue: '', description: 'The name of the service to deploy.', trim: true)
    string(name: 'IMAGE', defaultValue: '', description: 'The image of the new service.', trim: true)
    string(name: 'TAG', defaultValue: '', description: 'The tag of the new service.', trim: true)
    string(name: 'KEPTNCONTEXT', defaultValue: '', description: 'An id used for keptn tracing', trim: true)
    string(name: 'TIMESTAMP', defaultValue: '', description: 'Timestamp', trim: true)
  }
  agent {
    label 'kubegit'
  }
  stages {
    stage('Checkout test driver') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
            sh "rm -rf ${env.SERVICE}"
            sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
            sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUBORG}/${env.SERVICE}"
          }
        }
      }
    }
    stage('Run health check') {
      steps {
        echo "Waiting for the service to start..."
        container('kubectl') {
          script {
            if ( env.DEPLOYMENTSTRATEGY ==~ 'blue_green_service' ) {
              def status_blue = waitForDeployment (
                deploymentName: "${env.SERVICE}-blue",
                environment: "${env.PROJECT}-${env.STAGE}"
              )
              if(status_blue !=0 ){
                currentBuild.result = 'FAILED'
                error "Deployment - blue - did not finish before timeout."
              }
              
              def status_green = waitForDeployment (
                deploymentName: "${env.SERVICE}-green",
                environment: "${env.PROJECT}-${env.STAGE}"
              )
              if(status_green !=0 ){
                currentBuild.result = 'FAILED'
                error "Deployment - green - did not finish before timeout."
              }
            } else {
              def status = waitForDeployment (
                deploymentName: "${env.SERVICE}",
                environment: "${env.PROJECT}-${env.STAGE}"
              )
              if(status !=0 ){
                currentBuild.result = 'FAILED'
                error "Deployment did not finish before timeout."
              }
            }
          }
        }

        container('jmeter') {
          sh "rm -rf HealthCheck_${env.SERVICE}"
          sh "rm -f HealthCheck_${env.SERVICE}_result.tlf"
          sh "rm -f output.txt"

          script {
            def status = executeJMeter ( 
              scriptName: "${env.SERVICE}/jmeter/basiccheck.jmx", 
              resultsDir: "HealthCheck_${env.SERVICE}",
              serverUrl: "${env.SERVICE}.${env.PROJECT}-${env.STAGE}", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 1,
              LTN: "HealthCheck_${BUILD_NUMBER}",
              funcValidation: true,
              avgRtValidation: 0
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Health check in dev failed."
            }
          }
        }
      }
    }
    stage('Run functional check') {
      when {
        expression {
          return env.TESTSTRATEGY ==~ 'functional' 
        }
      }
      steps {
        container('jmeter') {
          sh "rm -rf FuncCheck_${env.SERVICE}"
          sh "rm -f FuncCheck_${env.SERVICE}_result.tlf"
          sh "rm -f output.txt"

          script {
            def status = executeJMeter (
              scriptName: "${env.SERVICE}/jmeter/${env.SERVICE}_load.jmx", 
              resultsDir: "FuncCheck_${env.SERVICE}",
              serverUrl: "${env.SERVICE}.${env.PROJECT}-${env.STAGE}.svc.cluster.local", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 1,
              LTN: "FuncCheck_${BUILD_NUMBER}",
              funcValidation: true,
              avgRtValidation: 0
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Functional check failed."
            }
          }
        }
      }
    }
    stage('Run performance check') {
      when {
        expression {
          return env.TESTSTRATEGY ==~ 'performance' 
        }
      }
      steps {
        container('kubectl') {
          sh "kubectl get svc istio-ingressgateway -n istio-system -o yaml >> gateway_all"
        }
        container('yq') {
          sh "cat gateway_all | yq - r status.loadBalancer.ingress[0].ip >> gateway"
          script {
            GATEWAY = readFile('gateway').trim()
            GATEWAY = GATEWAY + '.xip.io'
          }
        }
        script {
          container('jmeter') {
            script {
              def status = executeJMeter (
                scriptName: "${env.SERVICE}/jmeter/${env.SERVICE}_load.jmx", 
                resultsDir: "PerfCheck_${env.SERVICE}",
                serverUrl: "${env.SERVICE}.${env.PROJECT}-${env.STAGE}.${GATEWAY}", 
                serverPort: 80,
                checkPath: '/health',
                vuCount: 10,
                loopCount: 500,
                LTN: "PerfCheck_${BUILD_NUMBER}",
                funcValidation: false,
                avgRtValidation: 0
              )     
              if (status != 0) {
                currentBuild.result = 'FAILED'
                error "Performance check failed."
              }
            }
          }
        }
      }
    }
  }
  post {
    success {
      container("curl") {
        sendCloudEvent(
          receiver: 'event-broker.keptn.svc.cluster.local/keptn',
          type: 'sh.keptn.events.tests-finished',
          source: 'Jenkins',
          shkeptncontext : "${env.KEPTNCONTEXT}",
          data: [
            [key: 'githuborg', value: "${env.GITHUBORG}"],
            [key: 'project', value: "${env.PROJECT}"],
            [key: 'teststrategy', value: "${env.TESTSTRATEGY}"],
            [key: 'deploymentstrategy', value: "${env.DEPLOYMENTSTRATEGY}"],
            [key: 'stage', value: "${env.STAGE}"],
            [key: 'service', value: "${env.SERVICE}"],
            [key: 'image', value: "${env.IMAGE}"],
            [key: 'tag', value: "${env.TAG}"],
            [key: 'startedat', value: "${env.TIMESTAMP}"]
          ]
        )
      }
    }
    failure {
      script {
        if ( env.DEPLOYMENTSTRATEGY ==~ 'blue_green_service' ) {
          container("git"){
            withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
              sh "rm -rf ${env.PROJECT}"
              sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
              sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUBORG}/${env.PROJECT}"
              sh "cd ${env.PROJECT} && git checkout ${env.STAGE}"

              sh "cd ${env.PROJECT} && sed -i \"s#weight: 0#weight: swap_100#\" helm-chart/templates/${env.SERVICE}-istio-virtual-service.yaml"
              sh "cd ${env.PROJECT} && sed -i \"s#weight: 100#weight: 0#\" helm-chart/templates/${env.SERVICE}-istio-virtual-service.yaml"
              sh "cd ${env.PROJECT} && sed -i \"s#weight: swap_100#weight: 100#\" helm-chart/templates/${env.SERVICE}-istio-virtual-service.yaml"

              sh "cd ${env.PROJECT} && git add ."
              sh "cd ${env.PROJECT} && git commit -am '[keptn]: Switched blue green due to failed evaluation.'"
              sh "cd ${env.PROJECT} && git push"
            }
          }
          container("curl") {
            sendCloudEvent(
              receiver: 'event-broker.keptn.svc.cluster.local/keptn',
              type: 'sh.keptn.events.configuration-changed',
              source: 'Jenkins',
              shkeptncontext : "${env.KEPTNCONTEXT}",
              data: [
                [key: 'githuborg', value: "${env.GITHUBORG}"],
                [key: 'project', value: "${env.PROJECT}"],
                [key: 'teststrategy', value: ""],
                [key: 'deploymentstrategy', value: "${env.DEPLOYMENTSTRATEGY}"],
                [key: 'stage', value: "${env.STAGE}"],
                [key: 'service', value: "${env.SERVICE}"],
                [key: 'image', value: "${env.IMAGE}"],
                [key: 'tag', value: "${env.TAG}"]
              ]
            )
          }
        }
      }
    }
  }
}
